// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?   // hashed password - optional for OAuth users
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  interviews    Interview[]
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

// NextAuth Account model (for OAuth providers like Google)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Interview Session model - stores each interview attempt
model Interview {
  id              String   @id @default(cuid())
  userId          String
  roleId          String   // 'genai-developer', 'system-design', etc.
  status          InterviewStatus @default(IN_PROGRESS)
  startedAt       DateTime @default(now())
  completedAt     DateTime?
  durationMinutes Int?
  
  // Interview metadata
  totalQuestions  Int      @default(0)
  questionsAsked  String[] // Array of question IDs asked
  
  // Analysis results (stored as JSON)
  analysisScores  Json?    // { technical: 8, communication: 9, problemSolving: 7, experience: 8 }
  strengths       String[] // Array of strength descriptions
  improvements    String[] // Areas for improvement
  insights        String[] // Key insights from the interview
  recommendation  String?  // 'strong_yes', 'yes', 'maybe', 'no', 'strong_no'
  overallScore    Float?   // Overall score out of 10
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        Message[]
  
  @@index([userId])
  @@index([roleId])
  @@index([status])
  @@index([startedAt])
  @@map("interviews")
}

enum InterviewStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

// Individual message in the conversation
model Message {
  id          String   @id @default(cuid())
  interviewId String
  role        MessageRole
  content     String   @db.Text
  timestamp   DateTime @default(now())
  
  // Optional metadata
  isFollowUp  Boolean  @default(false)
  questionId  String?  // ID of the question being asked/answered
  
  // Relations
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  
  @@index([interviewId])
  @@index([role])
  @@index([timestamp])
  @@map("messages")
}

enum MessageRole {
  USER
  AGENT
}

// Verification tokens for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
